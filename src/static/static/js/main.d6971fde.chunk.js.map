{"version":3,"sources":["components/LearningPanel/LearningPanel.tsx","core/neuron/neuron.ts","core/network/network.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["interpolateImageData","dataArr","filter","_","idx","map","i","LearningPanel","props","useState","drawInProgress","setDrawInProgress","isHeatMapMode","setIsHeatMapMode","canvasRef","useRef","rect","current","getBoundingClientRect","left","top","handleClear","ctx","getContext","clearRect","style","display","alignItems","flexDirection","marginTop","label","backgroundColor","width","border","height","ref","onMouseDown","e","moveTo","clientX","clientY","beginPath","lineWidth","strokeStyle","onMouseMove","lineTo","stroke","onMouseUp","onMouseLeave","justifyContent","borderTop","padding","onClick","type","imageData","getImageData","data","interpolatedData","onTrain","Array","from","console","log","handleTrain","onGuess","handleGuess","margin","handleCopy","copiedImage","putImageData","heatMap","createImageData","length","currentWeight","weights","parseInt","getVectorsDotProduct","vect1","vect2","Error","reduce","prod","cur","getSavedWeights","localStorage","getItem","JSON","parse","getCurrentNeuronWeightsDataIndex","className","savedWeights","findIndex","weight","name","Neuron","sizing","classifierClassName","threshold","adjustWeights","example","dotProduct","w","savedWeightsDataIndex","newWeights","setItem","stringify","push","guess","inputs","weightedInputs","Math","pow","E","this","random","weightsDataIndex","toFixed","Network","imageSizing","classes","addClass","find","c","neuron","trainClass","classToTrain","forEach","recognize","results","result","value","sort","a","b","getCachedWeightsNames","getNeuronWeightsByClassName","network","networkClass","App","classNames","setClassNames","newClassName","setNewClassName","imageBuffer","setImageBuffer","recognizedValue","setRecognizedValue","handleAddClass","useCallback","useEffect","fetch","flexWrap","trainSet","onChange","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6971fde.chunk.js","sourcesContent":["import React, {\n  FC,\n  useRef,\n  MouseEvent as ReactMouseEvent,\n  useState,\n} from 'react';\n\ntype BaseProps = {\n  type: string;\n  label: string;\n  handleCopy: (image: ImageData) => void;\n  copiedImage: ImageData | null;\n};\n\ntype GuessPanel = BaseProps & {\n  type: 'guessing';\n  onGuess: (trainingSample: Array<number>) => void;\n};\n\ntype LearningPanelProps = BaseProps & {\n  type: 'learning';\n  weights: Array<number>;\n  onTrain: (trainingSample: Array<number>) => void;\n};\n\nfunction interpolateImageData(dataArr: Uint8ClampedArray) {\n  return dataArr\n    .filter((_, idx) => (idx + 1) % 4 === 0)\n    .map((i) => (i === 255 ? 1 : 0));\n}\n\nexport const LearningPanel: FC<LearningPanelProps | GuessPanel> = (props) => {\n  const [drawInProgress, setDrawInProgress] = useState(false);\n  const [isHeatMapMode, setIsHeatMapMode] = useState(false);\n  const canvasRef = useRef<null | HTMLCanvasElement>(null);\n\n  const rect = canvasRef.current?.getBoundingClientRect() || {\n    left: 0,\n    top: 0,\n  };\n\n  const handleMouseDown = (e: ReactMouseEvent<HTMLCanvasElement>) => {\n    if (canvasRef.current) {\n      setDrawInProgress(true);\n      const ctx = canvasRef.current.getContext('2d');\n      ctx!.moveTo(e.clientX - rect.left, e.clientY - rect.top);\n      ctx!.beginPath();\n      ctx!.lineWidth = 10;\n      ctx!.strokeStyle = 'black';\n    }\n  };\n  const handleMouseMove = (e: ReactMouseEvent<HTMLCanvasElement>) => {\n    if (drawInProgress && canvasRef.current) {\n      const ctx = canvasRef.current.getContext('2d');\n      ctx!.lineTo(e.clientX - rect.left, e.clientY - rect.top);\n      ctx!.stroke();\n    }\n  };\n  const handleMouseLeave = () => setDrawInProgress(false);\n  const handleMouseUp = (e: ReactMouseEvent<HTMLCanvasElement>) =>\n    setDrawInProgress(false);\n\n  const handleClear = () => {\n    const ctx = canvasRef.current!.getContext('2d');\n    ctx?.clearRect(0, 0, 200, 200);\n  };\n\n  const handleTrain = () => {\n    const ctx = canvasRef.current!.getContext('2d');\n    const imageData = ctx?.getImageData(0, 0, 200, 200).data;\n\n    if (imageData) {\n      const interpolatedData = interpolateImageData(imageData);\n\n      (props as LearningPanelProps).onTrain(Array.from(interpolatedData));\n      handleClear();\n    } else {\n      console.log('Something went wrong while training');\n    }\n  };\n\n  const handleGuess = () => {\n    const ctx = canvasRef.current!.getContext('2d');\n    const imageData = ctx?.getImageData(0, 0, 200, 200).data;\n\n    if (imageData) {\n      const interpolatedData = interpolateImageData(imageData);\n\n      (props as GuessPanel).onGuess(Array.from(interpolatedData));\n    } else {\n      console.log('Something went wrong while training');\n    }\n  };\n\n  const handleAction = () => {\n    if (props.type === 'learning') {\n      handleTrain();\n    }\n\n    if (props.type === 'guessing') {\n      handleGuess();\n    }\n  };\n\n  const handleCopyImage = () => {\n    const ctx = canvasRef.current!.getContext('2d');\n    const imageData = ctx!.getImageData(0, 0, 200, 200);\n    props.handleCopy(imageData);\n  };\n\n  const handlePasteImage = () => {\n    if (props.copiedImage !== null) {\n      const ctx = canvasRef.current!.getContext('2d');\n      handleClear();\n      ctx?.putImageData(props.copiedImage, 0, 0);\n    }\n  };\n\n  const toggleHeatmapMode = () => {\n    const ctx = canvasRef.current!.getContext('2d');\n    ctx?.clearRect(0, 0, 200, 200);\n    if (props.type === 'learning') {\n      if (isHeatMapMode) {\n        setIsHeatMapMode(false);\n        return;\n      }\n\n      const heatMap = ctx!.createImageData(200, 200);\n\n\n      for (let i = 0; i < heatMap.data.length; i += 4) {\n        const currentWeight = props.weights[i / 4];\n        heatMap.data[i + 0] = 0; // R value\n        heatMap.data[i + 1] = 0; // G value\n        heatMap.data[i + 2] = 0; // B value\n        heatMap.data[i + 3] =\n          currentWeight > 0 && currentWeight < 1\n            ? parseInt(`${currentWeight * 255}`, 10)\n            : 0; // A value\n      }\n\n      ctx!.putImageData(heatMap, 0, 0);\n      setIsHeatMapMode(true);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n        marginTop: 40,\n      }}\n    >\n      <label>Class: {props.label}</label>\n      <div\n        style={{\n          backgroundColor: 'grey',\n          display: 'flex',\n          width: 200,\n          border: '1px solid black',\n        }}\n      >\n        <canvas\n          width=\"200px\"\n          height=\"200px\"\n          style={{ backgroundColor: 'white' }}\n          ref={canvasRef}\n          onMouseDown={handleMouseDown}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onMouseLeave={handleMouseLeave}\n        />\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'space-between',\n          borderTop: '1px solid black',\n          padding: '5px',\n          marginTop: 10,\n        }}\n      >\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            flexDirection: 'row',\n          }}\n        >\n          <button onClick={handleAction} style={{ margin: '0 5px' }}>\n            {props.type === 'guessing' ? 'Guess' : 'Train'}\n          </button>\n          <button onClick={handleClear} style={{ margin: '0 5px' }}>\n            Clear\n          </button>\n          <button onClick={handleCopyImage} style={{ margin: '0 5px' }}>\n            Copy\n          </button>\n          <button onClick={handlePasteImage} style={{ margin: '0 5px' }}>\n            Paste\n          </button>\n        </div>\n        {props.type === 'learning' ? (\n          <button onClick={toggleHeatmapMode}>\n            {isHeatMapMode ? 'Heatmap Off' : 'Heatmap'}\n          </button>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n","function getVectorsDotProduct(vect1: Array<number>, vect2: Array<number>) {\n  if (vect1.length !== vect2.length) {\n    throw new Error('Vector`s lengths should be equal');\n  }\n\n  return vect1.reduce((prod, cur, idx) => prod + cur * vect2[idx], 0);\n}\n\nfunction getSavedWeights() {\n  if (localStorage.getItem('weights') !== null) {\n    return JSON.parse(localStorage.getItem('weights')!) as Array<{\n      name: string;\n      weights: Array<number>;\n    }>;\n  } else {\n    return null;\n  }\n}\n\nfunction getCurrentNeuronWeightsDataIndex(className: string) {\n  const savedWeights = getSavedWeights();\n  if (savedWeights !== null) {\n    return savedWeights.findIndex((weight) => weight.name === className);\n  }\n\n  return -1;\n}\n\nexport class Neuron {\n  weights: Array<number> = [];\n  threshold: number;\n  className: string;\n\n  constructor(\n    sizing: number,\n    classifierClassName: string,\n    threshold: number = 0.5\n  ) {\n    this.threshold = threshold;\n    this.className = classifierClassName;\n\n    if (localStorage.getItem('weights') === null) {\n      for (let i = 0; i < sizing; i++) {\n        this.weights.push(Math.random());\n      }\n    } else if (localStorage.getItem('weights') !== null) {\n      const weightsDataIndex = getCurrentNeuronWeightsDataIndex(this.className);\n\n      if (weightsDataIndex !== -1) {\n        this.weights = getSavedWeights()![weightsDataIndex].weights.map((w) => -w.toFixed(5) * -1);\n      } else {\n        for (let i = 0; i < sizing; i++) {\n          this.weights.push(Math.random());\n        }\n      }\n    }\n  }\n\n  adjustWeights = (example: Array<number>, label: 'positive' | 'negative') => {\n    const dotProduct = getVectorsDotProduct(example, this.weights);\n\n    if (label === 'positive' && dotProduct < 0) {\n      this.weights = this.weights.map((w, idx) => w + example[idx] * 0.1);\n    }\n\n    if (label === 'negative' && dotProduct >= 0) {\n      this.weights = this.weights.map((w, idx) => w - example[idx] * 0.1);\n    }\n\n    const savedWeightsDataIndex = getCurrentNeuronWeightsDataIndex(\n      this.className\n    );\n\n    if (savedWeightsDataIndex !== -1) {\n      const newWeights = getSavedWeights();\n      newWeights![savedWeightsDataIndex] = {\n        ...newWeights![savedWeightsDataIndex],\n        weights: this.weights,\n      };\n\n      localStorage.setItem('weights', JSON.stringify(newWeights));\n    } else {\n      const newWeights = getSavedWeights();\n      if (newWeights !== null) {\n        newWeights.push({ name: this.className, weights: this.weights });\n        localStorage.setItem('weights', JSON.stringify(newWeights));\n      } else {\n        localStorage.setItem(\n          'weights',\n          JSON.stringify([{ name: this.className, weights: this.weights }])\n        );\n      }\n    }\n  };\n\n  // teach = (learningSet: LearningSet, numOfIterations: number = 0) => {\n  //   if (numOfIterations > 10) {\n  //     console.log('Can not teach after 10 iterations');\n  //     return;\n  //   }\n\n  //   const allPositiveGuessed = learningSet.positive.every(\n  //     (inputs) => this.guess(inputs) >= this.threshold\n  //   );\n  //   const allNegativeGuessed = learningSet.negative.every(\n  //     (inputs) => this.guess(inputs) < this.threshold\n  //   );\n\n  //   if (!allPositiveGuessed || !allNegativeGuessed) {\n  //     learningSet.positive.forEach((example) =>\n  //       this.adjustWeights(example, 'positive')\n  //     );\n  //     learningSet.negative.forEach((example) =>\n  //       this.adjustWeights(example, 'negative')\n  //     );\n\n  //     this.teach(learningSet, numOfIterations + 1);\n  //   }\n  // };\n\n  guess = (inputs: Array<number>) => {\n    console.log('GUESSING.... sizing:', this.weights);\n    if (inputs.length !== this.weights.length) {\n      throw new Error('insufficient number of inputs');\n    }\n\n    const weightedInputs = getVectorsDotProduct(inputs, this.weights);\n    console.log('weightedInputs', weightedInputs);\n\n    return 1 / (1 + Math.pow(Math.E, -(this.threshold + weightedInputs)));\n  };\n}\n","import { Neuron } from '../neuron';\n\nexport class Network {\n  classes: Array<{ name: string; neuron: Neuron }> = [];\n  imageSizing: number;\n\n  constructor(imageSizing: number) {\n    this.imageSizing = imageSizing;\n  }\n\n  addClass = (name: string) => {\n    if (!this.classes.find((c) => c.name === name)) {\n      this.classes.push({\n        name,\n        neuron: new Neuron(this.imageSizing, name),\n      });\n    } else {\n      console.log('Class with such name already exists');\n    }\n  };\n\n  trainClass = (name: string, example: Array<number>) => {\n    const classToTrain = this.classes.find((c) => c.name === name);\n\n    if (classToTrain) {\n      classToTrain.neuron.adjustWeights(example, 'positive');\n      this.classes.forEach((c) => {\n        if (c.name !== name) {\n          c.neuron.adjustWeights(example, 'negative');\n        }\n      });\n    } else {\n      console.log('No class with such name');\n    }\n  };\n\n  recognize = (data: Array<number>) => {\n    const results = this.classes.map((c) => {\n      const result = c.neuron.guess(data);\n      return { name: c.name, value: result };\n    });\n\n    results.sort((a, b) => b.value - a.value);\n\n    return results[0];\n  };\n}\n","import React, {\n  useEffect,\n  useState,\n  useCallback,\n} from 'react';\nimport './App.css';\nimport { LearningPanel } from './components/LearningPanel';\nimport { Network } from './core/network';\n\nfunction getCachedWeights() {\n  return JSON.parse(localStorage.getItem('weights') || '[]') as Array<{\n    name: string;\n    weights: Array<number>;\n  }>;\n}\n\nfunction getCachedWeightsNames() {\n  return getCachedWeights().map((w) => w.name);\n}\n\nfunction getNeuronWeightsByClassName(network: Network, className: string) {\n  const networkClass = network.classes.find((c) => c.name === className);\n\n  return networkClass ? networkClass.neuron.weights : [];\n}\n\nfunction App() {\n  // Needed to enforce rerender\n  const [classNames, setClassNames] = useState<Array<string>>(\n    getCachedWeightsNames()\n  );\n  const [network] = useState(new Network(200 * 200));\n  const [newClassName, setNewClassName] = useState('');\n  const [imageBuffer, setImageBuffer] = useState<ImageData | null>(null);\n  const [recognizedValue, setRecognizedValue] = useState('?');\n\n  const handleAddClass = useCallback(() => {\n    network.addClass(newClassName);\n    setClassNames([...classNames, newClassName]);\n    setNewClassName('');\n  }, [classNames, setClassNames, newClassName, setNewClassName, network]);\n\n  const handleCopy = (imageData: ImageData) => {\n    setImageBuffer(imageData);\n  };\n\n  useEffect(() => {\n    getCachedWeightsNames().map(network.addClass);\n  }, [network]);\n\n  useEffect(() => {\n    fetch('')\n  }, [])\n\n  console.log('network', network);\n\n  return (\n    <div className=\"App\">\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          flexWrap: 'wrap',\n          padding: '15px',\n        }}\n      >\n        {classNames.map((className) => (\n          <LearningPanel\n            key={className}\n            type=\"learning\"\n            label={className}\n            copiedImage={imageBuffer}\n            onTrain={(trainSet: Array<number>) =>\n              network.trainClass(className, trainSet)\n            }\n            handleCopy={handleCopy}\n            weights={getNeuronWeightsByClassName(network, className)}\n          />\n        ))}\n      </div>\n      <input\n        value={newClassName}\n        onChange={(e) => setNewClassName(e.currentTarget.value)}\n      />\n      <button onClick={handleAddClass}>Add Class</button>\n      <div style={{ border: '1px solid green' }}>\n        <LearningPanel\n          type=\"guessing\"\n          label={recognizedValue}\n          copiedImage={imageBuffer}\n          onGuess={(data: Array<number>) =>\n            setRecognizedValue(network.recognize(data).name)\n          }\n          handleCopy={handleCopy}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}