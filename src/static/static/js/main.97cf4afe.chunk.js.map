{"version":3,"sources":["components/LearningPanel/LearningPanel.tsx","core/neuron/neuron.ts","core/network/network.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["interpolateImageData","dataArr","filter","_","idx","map","i","LearningPanel","props","useState","drawInProgress","setDrawInProgress","isHeatMapMode","setIsHeatMapMode","canvasRef","useRef","rect","current","getBoundingClientRect","left","top","handleClear","ctx","getContext","clearRect","style","display","alignItems","flexDirection","marginTop","label","backgroundColor","width","border","height","ref","onMouseDown","e","moveTo","clientX","clientY","beginPath","lineWidth","strokeStyle","onMouseMove","lineTo","stroke","onMouseUp","onMouseLeave","justifyContent","borderTop","padding","onClick","type","imageData","getImageData","data","interpolatedData","onTrain","Array","from","console","log","handleTrain","onGuess","handleGuess","margin","handleCopy","copiedImage","putImageData","heatMap","createImageData","length","currentWeight","weights","parseInt","getVectorsDotProduct","vect1","vect2","Error","reduce","prod","cur","Neuron","sizing","classifierClassName","services","initialWeights","threshold","className","adjustWeights","example","dotProduct","w","toFixed","updateWeights","guess","inputs","weightedInputs","Math","pow","E","this","push","random","Network","imageSizing","initialClasses","classes","addClass","name","find","c","neuron","newWeights","trainClass","classToTrain","forEach","recognize","results","result","value","sort","a","b","getNeuronWeightsByClassName","network","networkClass","App","classNames","setClassNames","setNetwork","newClassName","setNewClassName","imageBuffer","setImageBuffer","recognizedValue","setRecognizedValue","useCallback","handleUpdateWeights","fetch","process","method","headers","body","JSON","stringify","handleUpdateWeightsBulk","useEffect","then","res","json","d","updateWeightsBulk","flexWrap","trainSet","onChange","currentTarget","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","dotenv","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97cf4afe.chunk.js","sourcesContent":["import React, {\n  FC,\n  useRef,\n  MouseEvent as ReactMouseEvent,\n  useState,\n} from 'react';\n\ntype BaseProps = {\n  type: string;\n  label: string;\n  handleCopy: (image: ImageData) => void;\n  copiedImage: ImageData | null;\n};\n\ntype GuessPanel = BaseProps & {\n  type: 'guessing';\n  onGuess: (trainingSample: Array<number>) => void;\n};\n\ntype LearningPanelProps = BaseProps & {\n  type: 'learning';\n  weights: Array<number>;\n  onTrain: (trainingSample: Array<number>) => void;\n};\n\nfunction interpolateImageData(dataArr: Uint8ClampedArray) {\n  return dataArr\n    .filter((_, idx) => (idx + 1) % 4 === 0)\n    .map((i) => (i === 255 ? 1 : 0));\n}\n\nexport const LearningPanel: FC<LearningPanelProps | GuessPanel> = (props) => {\n  const [drawInProgress, setDrawInProgress] = useState(false);\n  const [isHeatMapMode, setIsHeatMapMode] = useState(false);\n  const canvasRef = useRef<null | HTMLCanvasElement>(null);\n\n  const rect = canvasRef.current?.getBoundingClientRect() || {\n    left: 0,\n    top: 0,\n  };\n\n  const handleMouseDown = (e: ReactMouseEvent<HTMLCanvasElement>) => {\n    if (canvasRef.current) {\n      setDrawInProgress(true);\n      const ctx = canvasRef.current.getContext('2d');\n      ctx!.moveTo(e.clientX - rect.left, e.clientY - rect.top);\n      ctx!.beginPath();\n      ctx!.lineWidth = 10;\n      ctx!.strokeStyle = 'black';\n    }\n  };\n  const handleMouseMove = (e: ReactMouseEvent<HTMLCanvasElement>) => {\n    if (drawInProgress && canvasRef.current) {\n      const ctx = canvasRef.current.getContext('2d');\n      ctx!.lineTo(e.clientX - rect.left, e.clientY - rect.top);\n      ctx!.stroke();\n    }\n  };\n  const handleMouseLeave = () => setDrawInProgress(false);\n  const handleMouseUp = (e: ReactMouseEvent<HTMLCanvasElement>) =>\n    setDrawInProgress(false);\n\n  const handleClear = () => {\n    const ctx = canvasRef.current!.getContext('2d');\n    ctx?.clearRect(0, 0, 200, 200);\n  };\n\n  const handleTrain = () => {\n    const ctx = canvasRef.current!.getContext('2d');\n    const imageData = ctx?.getImageData(0, 0, 200, 200).data;\n\n    if (imageData) {\n      const interpolatedData = interpolateImageData(imageData);\n\n      (props as LearningPanelProps).onTrain(Array.from(interpolatedData));\n      handleClear();\n    } else {\n      console.log('Something went wrong while training');\n    }\n  };\n\n  const handleGuess = () => {\n    const ctx = canvasRef.current!.getContext('2d');\n    const imageData = ctx?.getImageData(0, 0, 200, 200).data;\n\n    if (imageData) {\n      const interpolatedData = interpolateImageData(imageData);\n\n      (props as GuessPanel).onGuess(Array.from(interpolatedData));\n    } else {\n      console.log('Something went wrong while training');\n    }\n  };\n\n  const handleAction = () => {\n    if (props.type === 'learning') {\n      handleTrain();\n    }\n\n    if (props.type === 'guessing') {\n      handleGuess();\n    }\n  };\n\n  const handleCopyImage = () => {\n    const ctx = canvasRef.current!.getContext('2d');\n    const imageData = ctx!.getImageData(0, 0, 200, 200);\n    props.handleCopy(imageData);\n  };\n\n  const handlePasteImage = () => {\n    if (props.copiedImage !== null) {\n      const ctx = canvasRef.current!.getContext('2d');\n      handleClear();\n      ctx?.putImageData(props.copiedImage, 0, 0);\n    }\n  };\n\n  const toggleHeatmapMode = () => {\n    const ctx = canvasRef.current!.getContext('2d');\n    ctx?.clearRect(0, 0, 200, 200);\n    if (props.type === 'learning') {\n      if (isHeatMapMode) {\n        setIsHeatMapMode(false);\n        return;\n      }\n\n      const heatMap = ctx!.createImageData(200, 200);\n\n\n      for (let i = 0; i < heatMap.data.length; i += 4) {\n        const currentWeight = props.weights[i / 4];\n        heatMap.data[i + 0] = 0; // R value\n        heatMap.data[i + 1] = 0; // G value\n        heatMap.data[i + 2] = 0; // B value\n        heatMap.data[i + 3] =\n          currentWeight > 0 && currentWeight < 1\n            ? parseInt(`${currentWeight * 255}`, 10)\n            : 0; // A value\n      }\n\n      ctx!.putImageData(heatMap, 0, 0);\n      setIsHeatMapMode(true);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n        marginTop: 40,\n      }}\n    >\n      <label>Class: {props.label}</label>\n      <div\n        style={{\n          backgroundColor: 'grey',\n          display: 'flex',\n          width: 200,\n          border: '1px solid black',\n        }}\n      >\n        <canvas\n          width=\"200px\"\n          height=\"200px\"\n          style={{ backgroundColor: 'white' }}\n          ref={canvasRef}\n          onMouseDown={handleMouseDown}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onMouseLeave={handleMouseLeave}\n        />\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'space-between',\n          borderTop: '1px solid black',\n          padding: '5px',\n          marginTop: 10,\n        }}\n      >\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            flexDirection: 'row',\n          }}\n        >\n          <button onClick={handleAction} style={{ margin: '0 5px' }}>\n            {props.type === 'guessing' ? 'Guess' : 'Train'}\n          </button>\n          <button onClick={handleClear} style={{ margin: '0 5px' }}>\n            Clear\n          </button>\n          <button onClick={handleCopyImage} style={{ margin: '0 5px' }}>\n            Copy\n          </button>\n          <button onClick={handlePasteImage} style={{ margin: '0 5px' }}>\n            Paste\n          </button>\n        </div>\n        {props.type === 'learning' ? (\n          <button onClick={toggleHeatmapMode}>\n            {isHeatMapMode ? 'Heatmap Off' : 'Heatmap'}\n          </button>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n","function getVectorsDotProduct(vect1: Array<number>, vect2: Array<number>) {\n  if (vect1.length !== vect2.length) {\n    throw new Error('Vector`s lengths should be equal');\n  }\n\n  return vect1.reduce((prod, cur, idx) => prod + cur * vect2[idx], 0);\n}\n\n// function getSavedWeights() {\n//   if (localStorage.getItem('weights') !== null) {\n//     return JSON.parse(localStorage.getItem('weights')!) as Array<{\n//       name: string;\n//       weights: Array<number>;\n//     }>;\n//   } else {\n//     return null;\n//   }\n// }\n\n// function getCurrentNeuronWeightsDataIndex(className: string) {\n//   const savedWeights = getSavedWeights();\n//   if (savedWeights !== null) {\n//     return savedWeights.findIndex((weight) => weight.name === className);\n//   }\n\n//   return -1;\n// }\n\nexport class Neuron {\n  weights: Array<number> = [];\n  threshold: number;\n  className: string;\n  services: {\n    updateWeights: (weights: Array<number>) => void;\n  };\n\n  constructor(\n    sizing: number,\n    classifierClassName: string,\n    services: {\n      updateWeights: (weights: Array<number>) => void;\n    },\n    initialWeights: Array<number> = [],\n    threshold: number = 0.5\n  ) {\n    this.threshold = threshold;\n    this.className = classifierClassName;\n    this.services = services;\n\n    if (initialWeights.length === 0) {\n      for (let i = 0; i < sizing; i++) {\n        this.weights.push(Math.random());\n      }\n    } else if (initialWeights.length !== 0) {\n      this.weights = initialWeights;\n    }\n  }\n\n  adjustWeights = (example: Array<number>, label: 'positive' | 'negative') => {\n    const dotProduct = getVectorsDotProduct(example, this.weights);\n\n    if (label === 'positive' && dotProduct < 0) {\n      this.weights = this.weights.map(\n        (w, idx) => -(w + example[idx] * 0.1).toFixed(5) * -1\n      );\n    }\n\n    if (label === 'negative' && dotProduct >= 0) {\n      this.weights = this.weights.map((w, idx) => w - example[idx] * 0.1);\n    }\n\n    this.services.updateWeights(this.weights);\n\n    // if (savedWeightsDataIndex !== -1) {\n    //   const newWeights = getSavedWeights();\n    //   newWeights![savedWeightsDataIndex] = {\n    //     ...newWeights![savedWeightsDataIndex],\n    //     weights: this.weights,\n    //   };\n\n    //   localStorage.setItem('weights', JSON.stringify(newWeights));\n    // } else {\n    //   const newWeights = getSavedWeights();\n    //   if (newWeights !== null) {\n    //     newWeights.push({ name: this.className, weights: this.weights });\n    //     localStorage.setItem('weights', JSON.stringify(newWeights));\n    //   } else {\n    //     localStorage.setItem(\n    //       'weights',\n    //       JSON.stringify([{ name: this.className, weights: this.weights }])\n    //     );\n    //   }\n    // }\n  };\n\n  // teach = (learningSet: LearningSet, numOfIterations: number = 0) => {\n  //   if (numOfIterations > 10) {\n  //     console.log('Can not teach after 10 iterations');\n  //     return;\n  //   }\n\n  //   const allPositiveGuessed = learningSet.positive.every(\n  //     (inputs) => this.guess(inputs) >= this.threshold\n  //   );\n  //   const allNegativeGuessed = learningSet.negative.every(\n  //     (inputs) => this.guess(inputs) < this.threshold\n  //   );\n\n  //   if (!allPositiveGuessed || !allNegativeGuessed) {\n  //     learningSet.positive.forEach((example) =>\n  //       this.adjustWeights(example, 'positive')\n  //     );\n  //     learningSet.negative.forEach((example) =>\n  //       this.adjustWeights(example, 'negative')\n  //     );\n\n  //     this.teach(learningSet, numOfIterations + 1);\n  //   }\n  // };\n\n  guess = (inputs: Array<number>) => {\n    console.log('GUESSING.... sizing:', this.weights);\n    if (inputs.length !== this.weights.length) {\n      throw new Error('insufficient number of inputs');\n    }\n\n    const weightedInputs = getVectorsDotProduct(inputs, this.weights);\n    console.log('weightedInputs', weightedInputs);\n\n    return 1 / (1 + Math.pow(Math.E, -(this.threshold + weightedInputs)));\n  };\n}\n","import { Neuron } from '../neuron';\n\nexport class Network {\n  classes: Array<{ name: string; neuron: Neuron }> = [];\n  imageSizing: number;\n  services: {\n    updateWeights: (className: string, weights: Array<number>) => void;\n    updateWeightsBulk: (\n      newWeights: Array<{ name: string; weights: Array<number> }>\n    ) => void;\n  };\n\n  constructor(\n    imageSizing: number,\n    initialClasses: Array<{ name: string; weights: Array<number> }>,\n    services: {\n      updateWeights: (className: string, weights: Array<number>) => void;\n      updateWeightsBulk: (\n        newWeights: Array<{ name: string; weights: Array<number> }>\n      ) => void;\n    }\n  ) {\n    this.services = services;\n    this.imageSizing = imageSizing;\n    this.classes = initialClasses.map((c) => ({\n      name: c.name,\n      neuron: new Neuron(\n        imageSizing,\n        c.name,\n        {\n          updateWeights: (newWeights: Array<number>) =>\n            this.services.updateWeights(c.name, newWeights),\n        },\n        c.weights\n      ),\n    }));\n  }\n\n  addClass = (name: string) => {\n    if (!this.classes.find((c) => c.name === name)) {\n      this.classes.push({\n        name,\n        neuron: new Neuron(this.imageSizing, name, {\n          updateWeights: (newWeights: Array<number>) =>\n            this.services.updateWeights(name, newWeights),\n        }),\n      });\n    } else {\n      console.log('Class with such name already exists');\n    }\n  };\n\n  trainClass = (name: string, example: Array<number>) => {\n    const classToTrain = this.classes.find((c) => c.name === name);\n\n    if (classToTrain) {\n      classToTrain.neuron.adjustWeights(example, 'positive');\n      this.classes.forEach((c) => {\n        if (c.name !== name) {\n          c.neuron.adjustWeights(example, 'negative');\n        }\n      });\n\n      // this.services.updateWeightsBulk(\n      //   this.classes.map((c) => ({ name: c.name, weights: c.neuron.weights }))\n      // );\n    } else {\n      console.log('No class with such name');\n    }\n  };\n\n  recognize = (data: Array<number>) => {\n    const results = this.classes.map((c) => {\n      const result = c.neuron.guess(data);\n      return { name: c.name, value: result };\n    });\n\n    results.sort((a, b) => b.value - a.value);\n\n    return results[0];\n  };\n}\n","import React, { useEffect, useState, useCallback } from 'react';\nimport './App.css';\nimport { LearningPanel } from './components/LearningPanel';\nimport { Network } from './core/network';\n\n// function getCachedWeights() {\n//   return JSON.parse(localStorage.getItem('weights') || '[]') as Array<{\n//     name: string;\n//     weights: Array<number>;\n//   }>;\n// }\n\n// function getCachedWeightsNames() {\n//   return getCachedWeights().map((w) => w.name);\n// }\n\nfunction getNeuronWeightsByClassName(network: Network, className: string) {\n  const networkClass = network.classes.find((c) => c.name === className);\n\n  return networkClass ? networkClass.neuron.weights : [];\n}\n\nfunction App() {\n  // Needed to enforce rerender\n  const [classNames, setClassNames] = useState<Array<string>>([]);\n  const [network, setNetwork] = useState<Network | null>(null);\n  const [newClassName, setNewClassName] = useState('');\n  const [imageBuffer, setImageBuffer] = useState<ImageData | null>(null);\n  const [recognizedValue, setRecognizedValue] = useState('?');\n\n  const handleAddClass = useCallback(() => {\n    network?.addClass(newClassName);\n    setClassNames([...classNames, newClassName]);\n    setNewClassName('');\n  }, [classNames, setClassNames, newClassName, setNewClassName, network]);\n\n  const handleCopy = (imageData: ImageData) => {\n    setImageBuffer(imageData);\n  };\n\n  const handleUpdateWeights = (className: string, weights: Array<number>) => {\n    fetch(`${process.env.REACT_APP_SERVER}/classes/${className}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ weights: weights }),\n    });\n  };\n  const handleUpdateWeightsBulk = (\n    newWeights: Array<{ name: string; weights: Array<number> }>\n  ) => {\n    fetch(`${process.env.REACT_APP_SERVER}/classes/bulk`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ classes: newWeights }),\n    });\n  };\n\n  // useEffect(() => {\n  //   getCachedWeightsNames().map(network?.addClass || ((v) => v));\n  // }, [network]);\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_SERVER}/classes`)\n      .then((res) => res.json())\n      .then((data) => {\n        setClassNames(\n          (data as Array<{ name: string; weights: Array<number> }>).map(\n            (d) => d.name\n          )\n        );\n        setNetwork(\n          new Network(200 * 200, data, {\n            updateWeights: handleUpdateWeights,\n            updateWeightsBulk: handleUpdateWeightsBulk,\n          })\n        );\n      });\n  }, []);\n\n  if (network) {\n    return (\n      <div className=\"App\">\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            flexWrap: 'wrap',\n            padding: '15px',\n          }}\n        >\n          {classNames.map((className) => (\n            <LearningPanel\n              key={className}\n              type=\"learning\"\n              label={className}\n              copiedImage={imageBuffer}\n              onTrain={(trainSet: Array<number>) =>\n                network?.trainClass(className, trainSet)\n              }\n              handleCopy={handleCopy}\n              weights={getNeuronWeightsByClassName(network, className)}\n            />\n          ))}\n        </div>\n        <input\n          value={newClassName}\n          onChange={(e) => setNewClassName(e.currentTarget.value)}\n        />\n        {/* <button onClick={handleAddClass}>Add Class</button> */}\n        <div style={{ border: '1px solid green' }}>\n          <LearningPanel\n            type=\"guessing\"\n            label={recognizedValue}\n            copiedImage={imageBuffer}\n            onGuess={(data: Array<number>) =>\n              setRecognizedValue(network.recognize(data).name)\n            }\n            handleCopy={handleCopy}\n          />\n        </div>\n      </div>\n    );\n  }\n  return <div>Loading</div>;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}